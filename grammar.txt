http://craftinginterpreters.com/representing-code.html#context-free-grammars

Ascending Priority

stmt            -> expr assignment
                -> FN|ACT IDENTIFIER LPAR (IDENTIFIER,)* RPAR LBRACE expr RBRACE SEMICOLON #Function/Non-returning function definition
                -> DEC ACT? IDENTIFIER LPAR (IDENTIFIER,)* RPAR SEMICOLON #Function declaration/prototype

assignment      -> IDENTIFIER ("=") expr

expr            -> comparison

comparison      -> term ((">"|"<"|"=") term)*

term            -> factor (("+"|"-") factor)*

factor          -> unary ("*" unary)*

unary           -> ("+"|"-") unary 
                -> primary

primary         -> (NUMBER|IDENTIFIER) 
                -> LPAR expr RPAR
                -> IDENTIFIER LPAR (expr,)* RPAR #Function call