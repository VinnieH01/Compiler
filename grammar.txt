http://craftinginterpreters.com/representing-code.html#context-free-grammars

stmt            -> FN|ACTN IDENTIFIER LPAR (TYPE|IDENTIFIER COLON IDENTIFIER,)* RPAR ("->") TYPE LBRACE (expr|termination|assignment|if_statement|loop SEMICOLON)+ RBRACE SEMICOLON #Function/Non-returning function definition
                -> DEC ACTN? IDENTIFIER LPAR (TYPE|IDENTIFIER COLON IDENTIFIER,)* RPAR ("->") TYPE SEMICOLON #Function declaration/prototype
                -> let SEMICOLON
                -> struct SEMICOLON

struct          -> STRUCT IDENTIFIER LBRACE (TYPE COLON IDENTIFIER,)+ RBRACE

if_statement    -> IF expr LBRACE (expr|termination|assignment|pointee_assignment|let|if_statement|loop SEMICOLON)* RBRACE
                -> if_statement ELSE LBRACE (expr|termination|assignment|pointee_assignment|let|if_statement)* RBRACE
                -> if_statement ELSE IF expr LBRACE (expr|termination|assignment|pointee_assignment|let|if_statement|loop SEMICOLON)* RBRACE

loop            -> LOOP LBRACE (expr)* RBRACE
                -> WHILE expr LBRACE (expr)* RBRACE

termination     -> RET expr
                -> BREAK
                -> CONTINUE

let             -> LET TYPE|IDENTIFIER COLON IDENTIFIER ("<-") expr

pointee_assignment -> primary (":=") expr

assignment      -> IDENTIFIER ("<-") expr

expr            -> logic

logic           -> comparison (("&"|"|") comparison)*

comparison      -> term ((">"|"<"|"=") term)*

term            -> factor (("+"|"-") factor)*

factor          -> unary ("*" unary)*

unary           -> ("+"|"-"|"!"|"&") unary 
                -> primary

primary         -> (NUMBER|IDENTIFIER) 
                -> TYPE|IDENTIFIER COLON LITERAL
                -> IDENTIFIER COLON "{" (expr ",")* "}" #Struct
                -> LPAR expr RPAR
                -> IDENTIFIER "[" INTEGER "]" #Getting struct member
                -> IDENTIFIER LPAR (expr,)* RPAR #Function call
                -> TYPE|IDENTIFIER ("<-") IDENTIFIER #Dereference
                -> primary (".") IDENTIFIER
                -> primary AS TYPE